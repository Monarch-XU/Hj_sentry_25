// Generated by gencpp from file roborts_msgs/RobotStatus.msg
// DO NOT EDIT!


#ifndef ROBORTS_MSGS_MESSAGE_ROBOTSTATUS_H
#define ROBORTS_MSGS_MESSAGE_ROBOTSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace roborts_msgs
{
template <class ContainerAllocator>
struct RobotStatus_
{
  typedef RobotStatus_<ContainerAllocator> Type;

  RobotStatus_()
    : header()
    , game_type(0.0)
    , game_progress(0.0)
    , shooter_cooling_rate(0.0)
    , shooter_speed_limit(0.0)
    , shooter_cooling_limit(0.0)
    , robot_id(0.0)
    , remain_HP(0.0)
    , max_HP(0.0)
    , armor_id(0.0)
    , hurt_type(0.0)
    , bullet_freq(0.0)
    , bullet_speed(0.0)
    , bullet_remaining_num(0.0)
    , key_board(0.0)
    , other_robot_id(0.0)
    , tgx(0.0)
    , tgy(0.0)
    , tgz(0.0)
    , blue_x(0.0)
    , blue_y(0.0)
    , blue_confiden(0.0)
    , red_x(0.0)
    , red_y(0.0)
    , red_confiden(0.0)  {
    }
  RobotStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , game_type(0.0)
    , game_progress(0.0)
    , shooter_cooling_rate(0.0)
    , shooter_speed_limit(0.0)
    , shooter_cooling_limit(0.0)
    , robot_id(0.0)
    , remain_HP(0.0)
    , max_HP(0.0)
    , armor_id(0.0)
    , hurt_type(0.0)
    , bullet_freq(0.0)
    , bullet_speed(0.0)
    , bullet_remaining_num(0.0)
    , key_board(0.0)
    , other_robot_id(0.0)
    , tgx(0.0)
    , tgy(0.0)
    , tgz(0.0)
    , blue_x(0.0)
    , blue_y(0.0)
    , blue_confiden(0.0)
    , red_x(0.0)
    , red_y(0.0)
    , red_confiden(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _game_type_type;
  _game_type_type game_type;

   typedef double _game_progress_type;
  _game_progress_type game_progress;

   typedef double _shooter_cooling_rate_type;
  _shooter_cooling_rate_type shooter_cooling_rate;

   typedef double _shooter_speed_limit_type;
  _shooter_speed_limit_type shooter_speed_limit;

   typedef double _shooter_cooling_limit_type;
  _shooter_cooling_limit_type shooter_cooling_limit;

   typedef double _robot_id_type;
  _robot_id_type robot_id;

   typedef double _remain_HP_type;
  _remain_HP_type remain_HP;

   typedef double _max_HP_type;
  _max_HP_type max_HP;

   typedef double _armor_id_type;
  _armor_id_type armor_id;

   typedef double _hurt_type_type;
  _hurt_type_type hurt_type;

   typedef double _bullet_freq_type;
  _bullet_freq_type bullet_freq;

   typedef double _bullet_speed_type;
  _bullet_speed_type bullet_speed;

   typedef double _bullet_remaining_num_type;
  _bullet_remaining_num_type bullet_remaining_num;

   typedef double _key_board_type;
  _key_board_type key_board;

   typedef double _other_robot_id_type;
  _other_robot_id_type other_robot_id;

   typedef double _tgx_type;
  _tgx_type tgx;

   typedef double _tgy_type;
  _tgy_type tgy;

   typedef double _tgz_type;
  _tgz_type tgz;

   typedef double _blue_x_type;
  _blue_x_type blue_x;

   typedef double _blue_y_type;
  _blue_y_type blue_y;

   typedef double _blue_confiden_type;
  _blue_confiden_type blue_confiden;

   typedef double _red_x_type;
  _red_x_type red_x;

   typedef double _red_y_type;
  _red_y_type red_y;

   typedef double _red_confiden_type;
  _red_confiden_type red_confiden;





  typedef boost::shared_ptr< ::roborts_msgs::RobotStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roborts_msgs::RobotStatus_<ContainerAllocator> const> ConstPtr;

}; // struct RobotStatus_

typedef ::roborts_msgs::RobotStatus_<std::allocator<void> > RobotStatus;

typedef boost::shared_ptr< ::roborts_msgs::RobotStatus > RobotStatusPtr;
typedef boost::shared_ptr< ::roborts_msgs::RobotStatus const> RobotStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roborts_msgs::RobotStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roborts_msgs::RobotStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roborts_msgs::RobotStatus_<ContainerAllocator1> & lhs, const ::roborts_msgs::RobotStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.game_type == rhs.game_type &&
    lhs.game_progress == rhs.game_progress &&
    lhs.shooter_cooling_rate == rhs.shooter_cooling_rate &&
    lhs.shooter_speed_limit == rhs.shooter_speed_limit &&
    lhs.shooter_cooling_limit == rhs.shooter_cooling_limit &&
    lhs.robot_id == rhs.robot_id &&
    lhs.remain_HP == rhs.remain_HP &&
    lhs.max_HP == rhs.max_HP &&
    lhs.armor_id == rhs.armor_id &&
    lhs.hurt_type == rhs.hurt_type &&
    lhs.bullet_freq == rhs.bullet_freq &&
    lhs.bullet_speed == rhs.bullet_speed &&
    lhs.bullet_remaining_num == rhs.bullet_remaining_num &&
    lhs.key_board == rhs.key_board &&
    lhs.other_robot_id == rhs.other_robot_id &&
    lhs.tgx == rhs.tgx &&
    lhs.tgy == rhs.tgy &&
    lhs.tgz == rhs.tgz &&
    lhs.blue_x == rhs.blue_x &&
    lhs.blue_y == rhs.blue_y &&
    lhs.blue_confiden == rhs.blue_confiden &&
    lhs.red_x == rhs.red_x &&
    lhs.red_y == rhs.red_y &&
    lhs.red_confiden == rhs.red_confiden;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roborts_msgs::RobotStatus_<ContainerAllocator1> & lhs, const ::roborts_msgs::RobotStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roborts_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::roborts_msgs::RobotStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roborts_msgs::RobotStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborts_msgs::RobotStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborts_msgs::RobotStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborts_msgs::RobotStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborts_msgs::RobotStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roborts_msgs::RobotStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d9de178dca1cd2056946b6631a6ec5d2";
  }

  static const char* value(const ::roborts_msgs::RobotStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd9de178dca1cd205ULL;
  static const uint64_t static_value2 = 0x6946b6631a6ec5d2ULL;
};

template<class ContainerAllocator>
struct DataType< ::roborts_msgs::RobotStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roborts_msgs/RobotStatus";
  }

  static const char* value(const ::roborts_msgs::RobotStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roborts_msgs::RobotStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"  float64 game_type\n"
"  float64 game_progress\n"
"  float64 shooter_cooling_rate\n"
"  float64 shooter_speed_limit\n"
"  float64 shooter_cooling_limit\n"
"  float64 robot_id\n"
"  float64 remain_HP\n"
"  float64 max_HP\n"
"  float64 armor_id\n"
"  float64 hurt_type\n"
"  float64 bullet_freq\n"
"  float64 bullet_speed\n"
"  float64 bullet_remaining_num\n"
"  float64 key_board\n"
"  float64 other_robot_id\n"
"  float64 tgx\n"
"  float64 tgy\n"
"  float64 tgz\n"
"  float64 blue_x\n"
"  float64  blue_y\n"
"  float64  blue_confiden\n"
"  float64 red_x\n"
"  float64  red_y\n"
"  float64  red_confiden\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::roborts_msgs::RobotStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roborts_msgs::RobotStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.game_type);
      stream.next(m.game_progress);
      stream.next(m.shooter_cooling_rate);
      stream.next(m.shooter_speed_limit);
      stream.next(m.shooter_cooling_limit);
      stream.next(m.robot_id);
      stream.next(m.remain_HP);
      stream.next(m.max_HP);
      stream.next(m.armor_id);
      stream.next(m.hurt_type);
      stream.next(m.bullet_freq);
      stream.next(m.bullet_speed);
      stream.next(m.bullet_remaining_num);
      stream.next(m.key_board);
      stream.next(m.other_robot_id);
      stream.next(m.tgx);
      stream.next(m.tgy);
      stream.next(m.tgz);
      stream.next(m.blue_x);
      stream.next(m.blue_y);
      stream.next(m.blue_confiden);
      stream.next(m.red_x);
      stream.next(m.red_y);
      stream.next(m.red_confiden);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roborts_msgs::RobotStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roborts_msgs::RobotStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "game_type: ";
    Printer<double>::stream(s, indent + "  ", v.game_type);
    s << indent << "game_progress: ";
    Printer<double>::stream(s, indent + "  ", v.game_progress);
    s << indent << "shooter_cooling_rate: ";
    Printer<double>::stream(s, indent + "  ", v.shooter_cooling_rate);
    s << indent << "shooter_speed_limit: ";
    Printer<double>::stream(s, indent + "  ", v.shooter_speed_limit);
    s << indent << "shooter_cooling_limit: ";
    Printer<double>::stream(s, indent + "  ", v.shooter_cooling_limit);
    s << indent << "robot_id: ";
    Printer<double>::stream(s, indent + "  ", v.robot_id);
    s << indent << "remain_HP: ";
    Printer<double>::stream(s, indent + "  ", v.remain_HP);
    s << indent << "max_HP: ";
    Printer<double>::stream(s, indent + "  ", v.max_HP);
    s << indent << "armor_id: ";
    Printer<double>::stream(s, indent + "  ", v.armor_id);
    s << indent << "hurt_type: ";
    Printer<double>::stream(s, indent + "  ", v.hurt_type);
    s << indent << "bullet_freq: ";
    Printer<double>::stream(s, indent + "  ", v.bullet_freq);
    s << indent << "bullet_speed: ";
    Printer<double>::stream(s, indent + "  ", v.bullet_speed);
    s << indent << "bullet_remaining_num: ";
    Printer<double>::stream(s, indent + "  ", v.bullet_remaining_num);
    s << indent << "key_board: ";
    Printer<double>::stream(s, indent + "  ", v.key_board);
    s << indent << "other_robot_id: ";
    Printer<double>::stream(s, indent + "  ", v.other_robot_id);
    s << indent << "tgx: ";
    Printer<double>::stream(s, indent + "  ", v.tgx);
    s << indent << "tgy: ";
    Printer<double>::stream(s, indent + "  ", v.tgy);
    s << indent << "tgz: ";
    Printer<double>::stream(s, indent + "  ", v.tgz);
    s << indent << "blue_x: ";
    Printer<double>::stream(s, indent + "  ", v.blue_x);
    s << indent << "blue_y: ";
    Printer<double>::stream(s, indent + "  ", v.blue_y);
    s << indent << "blue_confiden: ";
    Printer<double>::stream(s, indent + "  ", v.blue_confiden);
    s << indent << "red_x: ";
    Printer<double>::stream(s, indent + "  ", v.red_x);
    s << indent << "red_y: ";
    Printer<double>::stream(s, indent + "  ", v.red_y);
    s << indent << "red_confiden: ";
    Printer<double>::stream(s, indent + "  ", v.red_confiden);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBORTS_MSGS_MESSAGE_ROBOTSTATUS_H
