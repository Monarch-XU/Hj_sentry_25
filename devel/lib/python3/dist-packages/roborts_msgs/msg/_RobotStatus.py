# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roborts_msgs/RobotStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class RobotStatus(genpy.Message):
  _md5sum = "d9de178dca1cd2056946b6631a6ec5d2"
  _type = "roborts_msgs/RobotStatus"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

  float64 game_type
  float64 game_progress
  float64 shooter_cooling_rate
  float64 shooter_speed_limit
  float64 shooter_cooling_limit
  float64 robot_id
  float64 remain_HP
  float64 max_HP
  float64 armor_id
  float64 hurt_type
  float64 bullet_freq
  float64 bullet_speed
  float64 bullet_remaining_num
  float64 key_board
  float64 other_robot_id
  float64 tgx
  float64 tgy
  float64 tgz
  float64 blue_x
  float64  blue_y
  float64  blue_confiden
  float64 red_x
  float64  red_y
  float64  red_confiden

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','game_type','game_progress','shooter_cooling_rate','shooter_speed_limit','shooter_cooling_limit','robot_id','remain_HP','max_HP','armor_id','hurt_type','bullet_freq','bullet_speed','bullet_remaining_num','key_board','other_robot_id','tgx','tgy','tgz','blue_x','blue_y','blue_confiden','red_x','red_y','red_confiden']
  _slot_types = ['std_msgs/Header','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,game_type,game_progress,shooter_cooling_rate,shooter_speed_limit,shooter_cooling_limit,robot_id,remain_HP,max_HP,armor_id,hurt_type,bullet_freq,bullet_speed,bullet_remaining_num,key_board,other_robot_id,tgx,tgy,tgz,blue_x,blue_y,blue_confiden,red_x,red_y,red_confiden

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.game_type is None:
        self.game_type = 0.
      if self.game_progress is None:
        self.game_progress = 0.
      if self.shooter_cooling_rate is None:
        self.shooter_cooling_rate = 0.
      if self.shooter_speed_limit is None:
        self.shooter_speed_limit = 0.
      if self.shooter_cooling_limit is None:
        self.shooter_cooling_limit = 0.
      if self.robot_id is None:
        self.robot_id = 0.
      if self.remain_HP is None:
        self.remain_HP = 0.
      if self.max_HP is None:
        self.max_HP = 0.
      if self.armor_id is None:
        self.armor_id = 0.
      if self.hurt_type is None:
        self.hurt_type = 0.
      if self.bullet_freq is None:
        self.bullet_freq = 0.
      if self.bullet_speed is None:
        self.bullet_speed = 0.
      if self.bullet_remaining_num is None:
        self.bullet_remaining_num = 0.
      if self.key_board is None:
        self.key_board = 0.
      if self.other_robot_id is None:
        self.other_robot_id = 0.
      if self.tgx is None:
        self.tgx = 0.
      if self.tgy is None:
        self.tgy = 0.
      if self.tgz is None:
        self.tgz = 0.
      if self.blue_x is None:
        self.blue_x = 0.
      if self.blue_y is None:
        self.blue_y = 0.
      if self.blue_confiden is None:
        self.blue_confiden = 0.
      if self.red_x is None:
        self.red_x = 0.
      if self.red_y is None:
        self.red_y = 0.
      if self.red_confiden is None:
        self.red_confiden = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.game_type = 0.
      self.game_progress = 0.
      self.shooter_cooling_rate = 0.
      self.shooter_speed_limit = 0.
      self.shooter_cooling_limit = 0.
      self.robot_id = 0.
      self.remain_HP = 0.
      self.max_HP = 0.
      self.armor_id = 0.
      self.hurt_type = 0.
      self.bullet_freq = 0.
      self.bullet_speed = 0.
      self.bullet_remaining_num = 0.
      self.key_board = 0.
      self.other_robot_id = 0.
      self.tgx = 0.
      self.tgy = 0.
      self.tgz = 0.
      self.blue_x = 0.
      self.blue_y = 0.
      self.blue_confiden = 0.
      self.red_x = 0.
      self.red_y = 0.
      self.red_confiden = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_24d().pack(_x.game_type, _x.game_progress, _x.shooter_cooling_rate, _x.shooter_speed_limit, _x.shooter_cooling_limit, _x.robot_id, _x.remain_HP, _x.max_HP, _x.armor_id, _x.hurt_type, _x.bullet_freq, _x.bullet_speed, _x.bullet_remaining_num, _x.key_board, _x.other_robot_id, _x.tgx, _x.tgy, _x.tgz, _x.blue_x, _x.blue_y, _x.blue_confiden, _x.red_x, _x.red_y, _x.red_confiden))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 192
      (_x.game_type, _x.game_progress, _x.shooter_cooling_rate, _x.shooter_speed_limit, _x.shooter_cooling_limit, _x.robot_id, _x.remain_HP, _x.max_HP, _x.armor_id, _x.hurt_type, _x.bullet_freq, _x.bullet_speed, _x.bullet_remaining_num, _x.key_board, _x.other_robot_id, _x.tgx, _x.tgy, _x.tgz, _x.blue_x, _x.blue_y, _x.blue_confiden, _x.red_x, _x.red_y, _x.red_confiden,) = _get_struct_24d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_24d().pack(_x.game_type, _x.game_progress, _x.shooter_cooling_rate, _x.shooter_speed_limit, _x.shooter_cooling_limit, _x.robot_id, _x.remain_HP, _x.max_HP, _x.armor_id, _x.hurt_type, _x.bullet_freq, _x.bullet_speed, _x.bullet_remaining_num, _x.key_board, _x.other_robot_id, _x.tgx, _x.tgy, _x.tgz, _x.blue_x, _x.blue_y, _x.blue_confiden, _x.red_x, _x.red_y, _x.red_confiden))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 192
      (_x.game_type, _x.game_progress, _x.shooter_cooling_rate, _x.shooter_speed_limit, _x.shooter_cooling_limit, _x.robot_id, _x.remain_HP, _x.max_HP, _x.armor_id, _x.hurt_type, _x.bullet_freq, _x.bullet_speed, _x.bullet_remaining_num, _x.key_board, _x.other_robot_id, _x.tgx, _x.tgy, _x.tgz, _x.blue_x, _x.blue_y, _x.blue_confiden, _x.red_x, _x.red_y, _x.red_confiden,) = _get_struct_24d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_24d = None
def _get_struct_24d():
    global _struct_24d
    if _struct_24d is None:
        _struct_24d = struct.Struct("<24d")
    return _struct_24d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
